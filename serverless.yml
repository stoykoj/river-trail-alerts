service: river-trail-alerts

provider:
  name: aws
  runtime: python3.8
  timeout: 30
  iamRoleStatements:
    - Effect: "Allow"
      Action: "*"
      Resource:
        Fn::GetAtt:
          - RiverTrailAlertsTable
          - Arn
    - Effect: "Allow"
      Action: "*"
      Resource: !Ref EmailSNSTopic

plugins:
  - serverless-python-requirements

custom:
  pythonRequirements:
    dockerizePip: non-linux

functions:
  update:
    handler: handler.handle
    events:
      - schedule: rate(30 minutes)
    environment:
      EMAIL_SNS_TOPIC_ARN: !Ref EmailSNSTopic
  subscribe:
    handler: src/frontend/subscribe.subscribe_page
    environment:
      SUBSCRIBE_LAMBDA_ENDPOINT: 
        !Join
          - ''
          - - 'https://'
            - !Ref ApiGatewayRestApi
            - '.execute-api.'
            - ${opt:region, self:provider.region}
            - '.amazonaws.com/'
            - ${self:provider.stage}
    events:
      - http:
          path: /
          method: get
          integration: lambda
          response:
            headers:
              Content-Type: "'text/html'"            
  subscribe_return:
    handler: src/frontend/subscribe.signed_up_page


resources:
  Resources:
    RiverTrailAlertsTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: "RiverTrailAlertsTable"
        AttributeDefinitions:
          - AttributeName: "pk"
            AttributeType: "S"
          - AttributeName: "sk"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "pk"
            KeyType: "HASH"
          - AttributeName: "sk"
            KeyType: "RANGE"
        ProvisionedThroughput:
          ReadCapacityUnits: 10
          WriteCapacityUnits: 2
    EmailSNSTopic:
      Type: "AWS::SNS::Topic"
      Properties:
        DisplayName: "RiverTrailAlerts"
        TopicName: "RiverTrailAlertsTopic"

  Outputs:
    EmailSNSTopicArn:
      Value: !Ref 'EmailSNSTopic'
      Description: ARN of the created SNS topic

